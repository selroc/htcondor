
#####################################################################################
# MANDATORY: To setup the credmon, you must uncomment this line:
use feature : OAUTH

# MANDATORY for local credmon: Uncomment these lines to have submitters always
# locally create a scitokens credential.  Job submit files then need to have
#    use_oauth_services = scitokens
# to send the credentials to the jobs,
# or a job transform should be added to the schedd config
# to always add `scitokens` to the list of `OAuthServicesNeeded`
# and set `SendCredential = True`
#
# LOCAL_CREDMON_PROVIDER_NAME = scitokens
# SEC_PROCESS_SUBMIT_TOKENS = false

# MANDATORY for local credmon if using scitokens:2.0 tokens (the default version
# as of HTCondor 8.9.13, see LOCAL_CREDMON_TOKEN_VERSION below)
# Audience (aud) claim that should be set in a locally issued token.
# The audience is a shared value between the token issuer and the service
# verifying the token. It is a space-separated list, will be converted to a JSON
# list object in the token.
# LOCAL_CREDMON_TOKEN_AUDIENCE = https://example.com https://anotherserver.edu

# MANDATORY for enabling the transfer of credentials from submit host
# to execute hosts, if encryption is not already enabled.
# SEC_DEFAULT_ENCRYPTION = REQUIRED

#####################################################################################
#
# OPTIONAL: These are customized in many use cases.
#
#

# The issuer location; relying parties will need to be able to access this issuer to
# download the corresponding public key.
# LOCAL_CREDMON_ISSUER = https://$(FULL_HOSTNAME)

# The authorizations given to the token.  Should be of the form `authz:path` and
# space-separated for multiple authorizations.  The token `{username}` will be
# expanded with the user's Unix username.
# LOCAL_CREDMON_AUTHZ_TEMPLATE = read:/user/{username} write:/user/{username}

# Additional group authorizations given to the token.  Should be of the form
# `authz:path` and space-separated for multiple authorizations.  For each group
# that the user belongs to in the mapfile (see LOCAL_CREDMON_AUTHZ_GROUP_MAPFILE
# below), this scope will be added with the token `{groupname}` expanded with the
# group name.
# LOCAL_CREDMON_AUTHZ_GROUP_TEMPLATE = read:/groups/{groupname} write:/groups/{groupname}

# The user-to-group(s) mapfile that should be used for expanding groupnames.
# This is required if using LOCAL_CREDMON_AUTHZ_GROUP_TEMPLATE. The format closely
# follows that of CLASSAD_USER_MAPFILE_<name> mapfiles, though the first token
# on each line must be "*". Invalid lines are ignored. For example, a valid line for
# a user named submituser might look like:
# * submituser      groupA,groupB,groupC
# This user would then have LOCAL_CREDMON_AUTHZ_GROUP_TEMPLATE appended three times
# (once per group) to their token's scope.
# LOCAL_CREDMON_AUTHZ_GROUP_MAPFILE = /etc/condor/local_credmon_group_map

#####################################################################################
#
#
# OPTIONAL: These are rarely customized
#
#

# Path to the private keyfile
# LOCAL_CREDMON_PRIVATE_KEY = /etc/condor/scitokens-private.pem

# The lifetime, in seconds, for a new token.  The credmon will continuously renew
# credentials on the submit-side.
# LOCAL_CREDMON_TOKEN_LIFETIME = 1200

# Each key must have a name that relying parties can look up; defaults to "local"
# LOCAL_CREDMON_KEY_ID = local

# Should the local issuer credmon write access tokens as JSON files (default)
# LOCAL_CREDMON_TOKEN_USE_JSON = true
# or as bare strings (LOCAL_CREDMON_TOKEN_USE_JSON = false)
# LOCAL_CREDMON_TOKEN_USE_JSON = false

# Version (ver) claim that should be set in a locally issued token
# Default: scitokens:2.0
# LOCAL_CREDMON_TOKEN_VERSION = scitokens:2.0

# Override the location of the credential directory, credmon daemon, or credmon log
# SEC_CREDENTIAL_DIRECTORY_OAUTH = /var/lib/condor/oauth_credentials
# CREDMON_OAUTH_LOG = $(LOG)/CredMonOAuthLog
# CREDMON_OAUTH = /usr/sbin/condor_credmon_oauth
